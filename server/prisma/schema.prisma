generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuctionBaseInfo {
  auction_no                 String                      @id
  case_year                  Int
  case_number                String
  item_no                    Int
  court_name                 String
  appraisal_price            BigInt?
  min_bid_price              BigInt?
  sale_date                  DateTime?
  status                     String?
  car_name                   String?
  car_model_year             Int?
  car_reg_number             String?
  car_mileage                Int?
  car_fuel                   String?
  car_transmission           String?
  car_type                   String?
  manufacturer               String?
  min_bid_price_2            BigInt?
  representative_photo_index Int                         @default(0)
  created_at                 DateTime                    @default(now())
  updated_at                 DateTime                    @default(now()) @updatedAt
  analysisAccesses           AuctionAnalysisAccess[]
  appraisalSummary           AuctionAppraisalSummary?
  detailInfo                 AuctionDetailInfo?
  auctionResult              AuctionResult?
  auctionUserActivities      AuctionUserActivity[]
  dateHistories              DateHistory[]
  mockBids                   MockBid[]
  photoUrls                  PhotoURL[]
  similarSales               SimilarSale[]
  vehicleComprehensiveReport VehicleComprehensiveReport?

  @@index([court_name])
  @@index([status])
  @@index([car_name])
  @@index([sale_date])
}

model AuctionDetailInfo {
  auction_no              String          @id
  court_name              String
  location_address        String?
  sale_time               String?
  sale_location           String?
  car_vin                 String?
  other_details           String?
  documents               Json?
  kind                    String?
  bid_method              String?
  case_received_date      DateTime?
  auction_start_date      DateTime?
  distribution_due_date   DateTime?
  claim_amount            BigInt?
  engine_type             String?
  approval_number         String?
  displacement            Int?
  department_info         String?
  dividend_demand_details String?
  dividend_storage_method String?
  appraisal_summary_text  String?
  created_at              DateTime        @default(now())
  updated_at              DateTime        @default(now()) @updatedAt
  baseInfo                AuctionBaseInfo @relation(fields: [auction_no], references: [auction_no], onDelete: Cascade)

  @@index([court_name])
}

model DateHistory {
  id              Int             @id @default(autoincrement())
  auction_no      String
  court_name      String
  date_time       DateTime
  type            String
  location        String?
  min_bid_price   BigInt?
  result          String?
  auctionBaseInfo AuctionBaseInfo @relation(fields: [auction_no], references: [auction_no], onDelete: Cascade)

  @@unique([auction_no, date_time, type], name: "auction_date_type_unique")
  @@index([auction_no])
  @@index([court_name])
}

model PhotoURL {
  id                Int             @id @default(autoincrement())
  auction_no        String
  court_name        String
  photo_index       Int
  image_path_or_url String
  auctionBaseInfo   AuctionBaseInfo @relation(fields: [auction_no], references: [auction_no], onDelete: Cascade)

  @@unique([auction_no, photo_index], name: "auction_photo_index_unique")
  @@index([auction_no])
}

model SimilarSale {
  id                      Int             @id @default(autoincrement())
  auction_no              String
  court_name              String
  period                  String
  sale_count              Int?
  avg_appraisal_price     BigInt?
  avg_sale_price          BigInt?
  sale_to_appraisal_ratio Float?
  avg_unsold_count        Float?
  created_at              DateTime        @default(now())
  updated_at              DateTime        @default(now()) @updatedAt
  auctionBaseInfo         AuctionBaseInfo @relation(fields: [auction_no], references: [auction_no], onDelete: Cascade)

  @@unique([auction_no, period], name: "auction_period_unique")
  @@index([auction_no])
}

model AuctionResult {
  auction_no      String          @id
  appraisal_value BigInt?
  min_bid_price   BigInt?
  sale_price      BigInt?
  bid_rate        Float?
  car_model_year  Int?
  car_name        String?
  car_type        String?
  sale_date       DateTime?
  createdAt       DateTime        @default(now())
  updated_at      DateTime        @default(now()) @updatedAt
  auction_outcome String?
  auction         AuctionBaseInfo @relation(fields: [auction_no], references: [auction_no])

  @@index([sale_date])
  @@index([car_type])
  @@index([car_name])
  @@index([car_model_year])
  @@index([auction_outcome])
}

model User {
  id                    String                  @id @default(cuid())
  providerId            String
  displayName           String?
  profileImageUrl       String?
  email                 String?                 @unique
  points                Int                     @default(30)
  detailViewCredits     Int                     @default(10)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  provider              SocialLoginProvider
  experiencePoints      Int                     @default(0)
  analysisAccesses      AuctionAnalysisAccess[]
  auctionUserActivities AuctionUserActivity[]
  mockBids              MockBid[]
  pointTransactions     PointTransaction[]
  purchases             Purchase[]
  subscriptions         Subscription?

  @@unique([provider, providerId])
}

model PointTransaction {
  id              String               @id @default(cuid())
  userId          String
  amount          Int
  balanceAfter    Int
  description     String?
  relatedId       String?
  transactionDate DateTime             @default(now())
  type            PointTransactionType
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model AuctionAnalysisAccess {
  id                 String          @id @default(cuid())
  userId             String
  auctionNo          String
  accessDate         DateTime        @default(now())
  pointTransactionId String?         @unique
  auction            AuctionBaseInfo @relation(fields: [auctionNo], references: [auction_no], onDelete: Cascade)
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionNo])
  @@index([userId])
  @@index([auctionNo])
}

model AuctionUserActivity {
  id         String          @id @default(cuid())
  userId     String
  auctionNo  String
  viewCount  Int             @default(0)
  lastViewed DateTime        @default(now())
  isFavorite Boolean         @default(false)
  auction    AuctionBaseInfo @relation(fields: [auctionNo], references: [auction_no], onDelete: Cascade)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionNo])
  @@index([userId])
  @@index([auctionNo])
  @@index([isFavorite])
}

model AuctionAppraisalSummary {
  auction_no                  String          @id
  summary_year_mileage        String?
  summary_color               String?
  summary_fuel                String?
  summary_inspection          String?
  summary_options_etc         String?
  created_at                  DateTime        @default(now())
  updated_at                  DateTime        @updatedAt
  summary_inspection_validity String?
  summary_management_status   String?
  baseInfo                    AuctionBaseInfo @relation(fields: [auction_no], references: [auction_no], onDelete: Cascade)
}

model VehicleComprehensiveReport {
  auction_no                        String          @id
  car_reg_number                    String
  reportQueryDate                   String?
  manufacturer                      String?
  modelYear                         Int?
  displacement                      String?
  fuelType                          String?
  detailModelName                   String?
  bodyType                          String?
  usageAndVehicleType               String?
  firstInsuranceDate                String?
  safetyFeaturesJson                Json?
  summaryTotalLossCount             Int?
  summaryTheftCount                 Int?
  summaryFloodDamage                String?
  summarySpecialUseHistory          String?
  summaryMyCarDamageCount           Int?
  summaryMyCarDamageAmount          BigInt?
  summaryOtherCarDamageCount        Int?
  summaryOtherCarDamageAmount       BigInt?
  summaryOwnerChangeCount           Int?
  summaryNumberChangeHistory        String?
  specialUsageRentalHistory         String?
  specialUsageBusinessUseHistory    String?
  specialUsageGovernmentUseHistory  String?
  ownerAndNumberChangesJson         Json?
  specialAccidentsTotalLossDate     String?
  specialAccidentsTheftDate         String?
  specialAccidentsFloodDamageDate   String?
  insuranceAccidentsUninsuredPeriod String?
  insuranceAccidentsDetailsJson     Json?
  mileageHistoryJson                Json?
  recallInfoJson                    Json?
  crawledAt                         DateTime        @default(now())
  sourceHtmlPath                    String?
  vehicleValueRangeMin              Int?
  vehicleValueRangeMax              Int?
  vehiclePredictedPriceJson         Json?
  updatedAt                         DateTime        @updatedAt
  auctionBaseInfo                   AuctionBaseInfo @relation(fields: [auction_no], references: [auction_no], onDelete: Cascade)
}

model CourtInfo {
  court_name String  @id
  address    String?
  region     String?
  latitude   Float?
  longitude  Float?
}

model MockBid {
  id                     String          @id @default(cuid())
  userId                 String
  auctionNo              String
  bidAmount              BigInt
  bidTime                DateTime        @default(now())
  isProcessed            Boolean         @default(false)
  rank                   Int?
  earnedExperiencePoints Int?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  auction_sale_date      DateTime
  auction                AuctionBaseInfo @relation(fields: [auctionNo], references: [auction_no], onDelete: Cascade)
  user                   User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionNo, auction_sale_date], name: "user_auction_sale_date_unique")
  @@index([userId])
  @@index([auctionNo])
  @@index([auction_sale_date])
  @@index([bidTime])
  @@index([isProcessed])
}

model Purchase {
  id            String    @id @default(cuid())
  userId        String
  productId     String
  purchaseToken String    @unique
  purchaseTime  DateTime
  orderId       String    @unique
  signature     String
  originalJson  Json
  isConsumed    Boolean   @default(false)
  consumedTime  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Subscription {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  productId              String
  planId                 String?  // 구독 등급 ID (basic-monthly, plus-monthly, premium-monthly)
  planTier               String?  // 구독 등급 (BASIC, PLUS, PREMIUM)
  originalPurchaseToken  String   @unique
  latestPurchaseToken    String
  startTime              DateTime
  expiryTime             DateTime
  status                 String
  autoRenewing           Boolean  @default(true)
  latestNotificationType String?
  latestNotificationJson Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([planTier])
  @@index([expiryTime])
  @@index([status])
}

model ProductInfo {
  id          String      @id
  productId   String
  type        ProductType
  value       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  description String?
  name        String
  features    Json?
  planId      String?
  planTier    String?

  @@unique([productId, planId])
  @@index([planTier])
  @@index([productId])
  @@index([type])
}

enum SocialLoginProvider {
  GOOGLE
  KAKAO
  NAVER
}

enum PointTransactionType {
  CHARGE
  SPEND_ANALYSIS
  REFUND
  ADMIN_GRANT
  PROMOTION
  MOCK_BID_WINNER_REWARD
}

enum ProductType {
  POINT
  SUBSCRIPTION
}
